{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "id": "szI3ltlQelf0"
      },
      "outputs": [],
      "source": [
        "#importing the libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "#importing label encoder for converting categorical variables to numerical\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "#imporing train_test split\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "#Importing classification algorithms\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier \n",
        "import xgboost as xgb\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "\n",
        "#Importing evaluation metrices\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "#Hyperparameter tuning\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "#To visualise feature importance\n",
        "from matplotlib import pyplot\n",
        "from sklearn.datasets import make_classification"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "CLFVTO-senrd",
        "outputId": "13a15353-a1fa-4d45-ffc7-a0cfe6fd1b3c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-064bb916-fd90-4b2f-ab8d-1d0987ef7fe8\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-064bb916-fd90-4b2f-ab8d-1d0987ef7fe8\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Loan_data.csv to Loan_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        "loan_data = pd.read_csv(io.BytesIO(uploaded['Loan_data.csv']))\n"
      ],
      "metadata": {
        "id": "SjspI8M_ep1L"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "7qcjFoD3eypg",
        "outputId": "66a591a4-8367-43e2-fc7c-0d81a092f9c2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Gender Married Dependents     Education Self_Employed  Income  \\\n",
              "0  LP001002   Male      No          0      Graduate            No    5849   \n",
              "1  LP001003   Male     Yes          1      Graduate            No    4583   \n",
              "2  LP001005   Male     Yes          0      Graduate           Yes    3000   \n",
              "3  LP001006   Male     Yes          0  Not Graduate            No    2583   \n",
              "4  LP001008   Male      No          0      Graduate            No    6000   \n",
              "\n",
              "   Co_applicant_Income  Loan_Amount  Loan_Amount_Term  Credit_History  \\\n",
              "0                  0.0          NaN             360.0             1.0   \n",
              "1               1508.0        128.0             360.0             1.0   \n",
              "2                  0.0         66.0             360.0             1.0   \n",
              "3               2358.0        120.0             360.0             1.0   \n",
              "4                  0.0        141.0             360.0             1.0   \n",
              "\n",
              "  Property_Area Loan_Status  \n",
              "0         Urban           Y  \n",
              "1         Rural           N  \n",
              "2         Urban           Y  \n",
              "3         Urban           Y  \n",
              "4         Urban           Y  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7aeb7e2a-fd75-4cd5-a0ac-7e139526f635\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Co_applicant_Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7aeb7e2a-fd75-4cd5-a0ac-7e139526f635')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7aeb7e2a-fd75-4cd5-a0ac-7e139526f635 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7aeb7e2a-fd75-4cd5-a0ac-7e139526f635');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "YH4UhaHje0B9",
        "outputId": "86aef67a-9a7a-4ec6-d5ef-8419fc29dc0a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Income  Co_applicant_Income  Loan_Amount  Loan_Amount_Term  \\\n",
              "count    614.000000           614.000000   592.000000         600.00000   \n",
              "mean    5403.459283          1621.245798   146.412162         342.00000   \n",
              "std     6109.041673          2926.248369    85.587325          65.12041   \n",
              "min      150.000000             0.000000     9.000000          12.00000   \n",
              "25%     2877.500000             0.000000   100.000000         360.00000   \n",
              "50%     3812.500000          1188.500000   128.000000         360.00000   \n",
              "75%     5795.000000          2297.250000   168.000000         360.00000   \n",
              "max    81000.000000         41667.000000   700.000000         480.00000   \n",
              "\n",
              "       Credit_History  \n",
              "count      564.000000  \n",
              "mean         0.842199  \n",
              "std          0.364878  \n",
              "min          0.000000  \n",
              "25%          1.000000  \n",
              "50%          1.000000  \n",
              "75%          1.000000  \n",
              "max          1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c6e8eb6-612f-4d3e-b9e9-3781b9f527c0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Income</th>\n",
              "      <th>Co_applicant_Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>614.000000</td>\n",
              "      <td>614.000000</td>\n",
              "      <td>592.000000</td>\n",
              "      <td>600.00000</td>\n",
              "      <td>564.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5403.459283</td>\n",
              "      <td>1621.245798</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>342.00000</td>\n",
              "      <td>0.842199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6109.041673</td>\n",
              "      <td>2926.248369</td>\n",
              "      <td>85.587325</td>\n",
              "      <td>65.12041</td>\n",
              "      <td>0.364878</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>150.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>12.00000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2877.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3812.500000</td>\n",
              "      <td>1188.500000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5795.000000</td>\n",
              "      <td>2297.250000</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>81000.000000</td>\n",
              "      <td>41667.000000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>480.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c6e8eb6-612f-4d3e-b9e9-3781b9f527c0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8c6e8eb6-612f-4d3e-b9e9-3781b9f527c0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8c6e8eb6-612f-4d3e-b9e9-3781b9f527c0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_A0eNxTwe_0U",
        "outputId": "3e05b4d7-0216-4c35-b092-a8db42cc2014"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 614 entries, 0 to 613\n",
            "Data columns (total 13 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Loan_ID              614 non-null    object \n",
            " 1   Gender               601 non-null    object \n",
            " 2   Married              611 non-null    object \n",
            " 3   Dependents           599 non-null    object \n",
            " 4   Education            614 non-null    object \n",
            " 5   Self_Employed        582 non-null    object \n",
            " 6   Income               614 non-null    int64  \n",
            " 7   Co_applicant_Income  614 non-null    float64\n",
            " 8   Loan_Amount          592 non-null    float64\n",
            " 9   Loan_Amount_Term     600 non-null    float64\n",
            " 10  Credit_History       564 non-null    float64\n",
            " 11  Property_Area        614 non-null    object \n",
            " 12  Loan_Status          614 non-null    object \n",
            "dtypes: float64(4), int64(1), object(8)\n",
            "memory usage: 62.5+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Pre-processing"
      ],
      "metadata": {
        "id": "8x08wCMDfU6l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# finding the null values in the dataset\n",
        "loan_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MmbIM4LlfdCD",
        "outputId": "13549aaf-7d88-47a3-d13e-96618b97eef8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID                 0\n",
              "Gender                 13\n",
              "Married                 3\n",
              "Dependents             15\n",
              "Education               0\n",
              "Self_Employed          32\n",
              "Income                  0\n",
              "Co_applicant_Income     0\n",
              "Loan_Amount            22\n",
              "Loan_Amount_Term       14\n",
              "Credit_History         50\n",
              "Property_Area           0\n",
              "Loan_Status             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data['Gender'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IHeyEk0XhX0Y",
        "outputId": "dccd2c30-7bc1-4c22-b29c-6e63f6823134"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    Male\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data['Married'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vpgfkjMwhaHK",
        "outputId": "4ab570e7-401e-452b-ab07-67b7f2437994"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    Yes\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data['Dependents'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RqbEv76OhdqE",
        "outputId": "b596b719-9e8a-4639-a519-7340907b9fb4"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data['Self_Employed'].mode()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQnia__1hgqu",
        "outputId": "f7f9ef06-c8a7-4879-90d5-be5d896774c4"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    No\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Here the null values in the numerical varibles can be dealed with finding the mean and categorical variables can be dealed with mode.\n",
        "# Replacing all NaN  values with 0, which is the model of all 4 columns\n",
        "\n",
        "loan_data['Gender'] = loan_data[\"Gender\"].fillna(loan_data['Gender'].mode()[0])\n",
        "loan_data['Married'] = loan_data[\"Married\"].fillna(loan_data['Married'].mode()[0])\n",
        "loan_data['Dependents'] = loan_data[\"Dependents\"].fillna(loan_data['Dependents'].mode()[0])\n",
        "loan_data['Self_Employed'] = loan_data[\"Self_Employed\"].fillna(loan_data['Self_Employed'].mode()[0])\n"
      ],
      "metadata": {
        "id": "RYj4XYcAfq3A"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Replacing all NaN values in the numerical variables with their mean\n",
        "\n",
        "loan_data['Loan_Amount'] = loan_data['Loan_Amount'].fillna(loan_data['Loan_Amount'].mean())\n",
        "loan_data['Loan_Amount_Term'] = loan_data['Loan_Amount_Term'].fillna(loan_data['Loan_Amount_Term'].mean())\n",
        "loan_data['Credit_History'] = loan_data['Credit_History'].fillna(loan_data['Credit_History'].mean())\n"
      ],
      "metadata": {
        "id": "3tk9zUhVhH7s"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Now there are no empty cells in the dataset\n",
        "loan_data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m4bznyaphH9_",
        "outputId": "08c4b4d9-f3cd-496a-ca3d-6d2b0f8d2624"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID                0\n",
              "Gender                 0\n",
              "Married                0\n",
              "Dependents             0\n",
              "Education              0\n",
              "Self_Employed          0\n",
              "Income                 0\n",
              "Co_applicant_Income    0\n",
              "Loan_Amount            0\n",
              "Loan_Amount_Term       0\n",
              "Credit_History         0\n",
              "Property_Area          0\n",
              "Loan_Status            0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "iiucJ-wDiM0i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Gender'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "gmh_VKuyhIAx",
        "outputId": "8af0c64b-a341-4631-9ed8-64a9591dbcb2"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d54d9690>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Married'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "bqK4RZ_LhIDp",
        "outputId": "060dd7aa-8a3c-4356-fc58-5308a35071e0"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d541d790>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Dependents'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "8F-JgZZQijiV",
        "outputId": "50e89100-e72b-475b-cebc-2cefc0d6dcbf"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d543a510>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Education'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "zmd_ViZ-in1-",
        "outputId": "f9e10c13-11b3-4598-cee3-ee64280717b5"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d4f34290>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Self_Employed'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "VVOERlv3it0g",
        "outputId": "5ad42ead-d55b-4768-fb30-47839be00576"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d4eac590>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Property_Area'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "VeFeHQIDizJ2",
        "outputId": "0ce91a40-bbf5-4850-ab06-1363d3bc440f"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d4e00f10>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(loan_data['Loan_Status'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "GxnI6-IOi3uR",
        "outputId": "32f97bfa-d37f-4d27-b777-c2c362710898"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d4e0b6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Engineering"
      ],
      "metadata": {
        "id": "ws_wd2otjn7P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# total income column which is the sum total of applicant income and co applicant income\n",
        "loan_data['Total_Income'] = loan_data['Income'] + loan_data['Co_applicant_Income']\n",
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "ehV6BjUzjrRd",
        "outputId": "a18591ff-3296-4632-c7ea-3d191e5fb0a0"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Gender Married Dependents     Education Self_Employed  Income  \\\n",
              "0  LP001002   Male      No          0      Graduate            No    5849   \n",
              "1  LP001003   Male     Yes          1      Graduate            No    4583   \n",
              "2  LP001005   Male     Yes          0      Graduate           Yes    3000   \n",
              "3  LP001006   Male     Yes          0  Not Graduate            No    2583   \n",
              "4  LP001008   Male      No          0      Graduate            No    6000   \n",
              "\n",
              "   Co_applicant_Income  Loan_Amount  Loan_Amount_Term  Credit_History  \\\n",
              "0                  0.0   146.412162             360.0             1.0   \n",
              "1               1508.0   128.000000             360.0             1.0   \n",
              "2                  0.0    66.000000             360.0             1.0   \n",
              "3               2358.0   120.000000             360.0             1.0   \n",
              "4                  0.0   141.000000             360.0             1.0   \n",
              "\n",
              "  Property_Area Loan_Status  Total_Income  \n",
              "0         Urban           Y        5849.0  \n",
              "1         Rural           N        6091.0  \n",
              "2         Urban           Y        3000.0  \n",
              "3         Urban           Y        4941.0  \n",
              "4         Urban           Y        6000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b963060-51ff-4ee5-83cc-703123cd60cd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Co_applicant_Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "      <th>Total_Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>5849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "      <td>6091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>3000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>4941.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>6000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b963060-51ff-4ee5-83cc-703123cd60cd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4b963060-51ff-4ee5-83cc-703123cd60cd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4b963060-51ff-4ee5-83cc-703123cd60cd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Co-Relation Matix"
      ],
      "metadata": {
        "id": "Ej5HqvuekJs6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr = loan_data.corr()\n",
        "plt.figure(figsize=(15,10))\n",
        "sns.heatmap(corr, annot = True, cmap=\"BuPu\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 613
        },
        "id": "Mtgz9ZVpkCnJ",
        "outputId": "21aafce1-bfab-410d-f934-e2e5f05f394d"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f50d4dae690>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "6LHOS94mlSyj",
        "outputId": "db2bcfe0-4d91-4cff-bd39-cf3016060895"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Gender Married Dependents     Education Self_Employed  Income  \\\n",
              "0  LP001002   Male      No          0      Graduate            No    5849   \n",
              "1  LP001003   Male     Yes          1      Graduate            No    4583   \n",
              "2  LP001005   Male     Yes          0      Graduate           Yes    3000   \n",
              "3  LP001006   Male     Yes          0  Not Graduate            No    2583   \n",
              "4  LP001008   Male      No          0      Graduate            No    6000   \n",
              "\n",
              "   Co_applicant_Income  Loan_Amount  Loan_Amount_Term  Credit_History  \\\n",
              "0                  0.0   146.412162             360.0             1.0   \n",
              "1               1508.0   128.000000             360.0             1.0   \n",
              "2                  0.0    66.000000             360.0             1.0   \n",
              "3               2358.0   120.000000             360.0             1.0   \n",
              "4                  0.0   141.000000             360.0             1.0   \n",
              "\n",
              "  Property_Area Loan_Status  Total_Income  \n",
              "0         Urban           Y        5849.0  \n",
              "1         Rural           N        6091.0  \n",
              "2         Urban           Y        3000.0  \n",
              "3         Urban           Y        4941.0  \n",
              "4         Urban           Y        6000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6a84549-3606-4f6d-a778-763ce669ce38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Co_applicant_Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "      <th>Total_Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>5849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "      <td>6091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>3000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>4941.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>6000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6a84549-3606-4f6d-a778-763ce669ce38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e6a84549-3606-4f6d-a778-763ce669ce38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e6a84549-3606-4f6d-a778-763ce669ce38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# drop unnecessary columns\n",
        "cols = [ 'Co_applicant_Income', 'Loan_ID']\n",
        "loan_data = loan_data.drop(columns=cols, axis=1)\n",
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "-U9XC07nlRIb",
        "outputId": "7a56b9f1-5631-49a8-a956-dc373294c653"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Gender Married Dependents     Education Self_Employed  Income  Loan_Amount  \\\n",
              "0   Male      No          0      Graduate            No    5849   146.412162   \n",
              "1   Male     Yes          1      Graduate            No    4583   128.000000   \n",
              "2   Male     Yes          0      Graduate           Yes    3000    66.000000   \n",
              "3   Male     Yes          0  Not Graduate            No    2583   120.000000   \n",
              "4   Male      No          0      Graduate            No    6000   141.000000   \n",
              "\n",
              "   Loan_Amount_Term  Credit_History Property_Area Loan_Status  Total_Income  \n",
              "0             360.0             1.0         Urban           Y        5849.0  \n",
              "1             360.0             1.0         Rural           N        6091.0  \n",
              "2             360.0             1.0         Urban           Y        3000.0  \n",
              "3             360.0             1.0         Urban           Y        4941.0  \n",
              "4             360.0             1.0         Urban           Y        6000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f1cdfa4f-b525-49f0-ab05-467d500862cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "      <th>Total_Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>5849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "      <td>6091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>3000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>4941.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "      <td>6000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1cdfa4f-b525-49f0-ab05-467d500862cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f1cdfa4f-b525-49f0-ab05-467d500862cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f1cdfa4f-b525-49f0-ab05-467d500862cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting all categorical variables to numerical by label encoding\n",
        "\n",
        "columns = ['Gender',\"Married\",\"Education\",'Self_Employed',\"Property_Area\",\"Loan_Status\",\"Dependents\"]\n",
        "for col in columns:\n",
        "    loan_data[col] = LabelEncoder().fit_transform(loan_data[col])\n",
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "WuamC5vAmIlk",
        "outputId": "50ead3ec-a9eb-4b93-8e2b-41b8c1193763"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender  Married  Dependents  Education  Self_Employed  Income  Loan_Amount  \\\n",
              "0       1        0           0          0              0    5849   146.412162   \n",
              "1       1        1           1          0              0    4583   128.000000   \n",
              "2       1        1           0          0              1    3000    66.000000   \n",
              "3       1        1           0          1              0    2583   120.000000   \n",
              "4       1        0           0          0              0    6000   141.000000   \n",
              "\n",
              "   Loan_Amount_Term  Credit_History  Property_Area  Loan_Status  Total_Income  \n",
              "0             360.0             1.0              2            1        5849.0  \n",
              "1             360.0             1.0              0            0        6091.0  \n",
              "2             360.0             1.0              2            1        3000.0  \n",
              "3             360.0             1.0              2            1        4941.0  \n",
              "4             360.0             1.0              2            1        6000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f264d8ae-c5a4-48f8-b4e7-685b8e0a1fdf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "      <th>Total_Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5849</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4583</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2583</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4941.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6000</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f264d8ae-c5a4-48f8-b4e7-685b8e0a1fdf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f264d8ae-c5a4-48f8-b4e7-685b8e0a1fdf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f264d8ae-c5a4-48f8-b4e7-685b8e0a1fdf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train-Test Split"
      ],
      "metadata": {
        "id": "KLowM1JHnDl5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# specify input and output attributes\n",
        "X = loan_data.drop(columns=['Loan_Status'], axis=1)\n",
        "y = loan_data['Loan_Status']"
      ],
      "metadata": {
        "id": "y1uNU9Iim732"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"
      ],
      "metadata": {
        "id": "CRQTDZYOnQ8d"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Training"
      ],
      "metadata": {
        "id": "M5k2eT2RoVmN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Creating a list of all the training set to train them in a loop\n",
        "model = [LogisticRegression(), DecisionTreeClassifier(), RandomForestClassifier(), xgb.XGBClassifier(), AdaBoostClassifier()]\n",
        "method = ['Logistic Regression', 'Decision Tree', 'Random Forest', 'XGBoost', 'AdaBoost']"
      ],
      "metadata": {
        "id": "KU0H9IHjoyNK"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for i in range (0, len(model)):\n",
        "    model[i].fit(X_train, y_train)\n",
        "    predict = model[i].predict(X_test)\n",
        "    print(method[i])\n",
        "    print()\n",
        "    print(classification_report(y_test, predict))\n",
        "    print()\n",
        "    print('Accuracy score of the test data : ',accuracy_score(predict, y_test))\n",
        "    print()\n",
        "    print(confusion_matrix(y_test, predict))\n",
        "    print()\n",
        "    print('-------------------------------------------------------------------------------------')\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ArVW4xeMp7eo",
        "outputId": "c77a0cff-00cc-47c9-da8e-24b66a541c0d"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.92      0.41      0.56        54\n",
            "           1       0.75      0.98      0.85       100\n",
            "\n",
            "    accuracy                           0.78       154\n",
            "   macro avg       0.84      0.69      0.71       154\n",
            "weighted avg       0.81      0.78      0.75       154\n",
            "\n",
            "\n",
            "Accuracy score of the test data :  0.7792207792207793\n",
            "\n",
            "[[22 32]\n",
            " [ 2 98]]\n",
            "\n",
            "-------------------------------------------------------------------------------------\n",
            "\n",
            "Decision Tree\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.56      0.59        54\n",
            "           1       0.77      0.82      0.80       100\n",
            "\n",
            "    accuracy                           0.73       154\n",
            "   macro avg       0.70      0.69      0.69       154\n",
            "weighted avg       0.72      0.73      0.72       154\n",
            "\n",
            "\n",
            "Accuracy score of the test data :  0.7272727272727273\n",
            "\n",
            "[[30 24]\n",
            " [18 82]]\n",
            "\n",
            "-------------------------------------------------------------------------------------\n",
            "\n",
            "Random Forest\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.88      0.43      0.57        54\n",
            "           1       0.76      0.97      0.85       100\n",
            "\n",
            "    accuracy                           0.78       154\n",
            "   macro avg       0.82      0.70      0.71       154\n",
            "weighted avg       0.80      0.78      0.75       154\n",
            "\n",
            "\n",
            "Accuracy score of the test data :  0.7792207792207793\n",
            "\n",
            "[[23 31]\n",
            " [ 3 97]]\n",
            "\n",
            "-------------------------------------------------------------------------------------\n",
            "\n",
            "XGBoost\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.46      0.59        54\n",
            "           1       0.76      0.94      0.84       100\n",
            "\n",
            "    accuracy                           0.77       154\n",
            "   macro avg       0.79      0.70      0.72       154\n",
            "weighted avg       0.78      0.77      0.75       154\n",
            "\n",
            "\n",
            "Accuracy score of the test data :  0.7727272727272727\n",
            "\n",
            "[[25 29]\n",
            " [ 6 94]]\n",
            "\n",
            "-------------------------------------------------------------------------------------\n",
            "\n",
            "AdaBoost\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.80      0.44      0.57        54\n",
            "           1       0.76      0.94      0.84       100\n",
            "\n",
            "    accuracy                           0.77       154\n",
            "   macro avg       0.78      0.69      0.71       154\n",
            "weighted avg       0.77      0.77      0.75       154\n",
            "\n",
            "\n",
            "Accuracy score of the test data :  0.7662337662337663\n",
            "\n",
            "[[24 30]\n",
            " [ 6 94]]\n",
            "\n",
            "-------------------------------------------------------------------------------------\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The selected model is random forest."
      ],
      "metadata": {
        "id": "iRvVRlLs7w9J"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hyperparameter Tuning"
      ],
      "metadata": {
        "id": "kA9cr_y98-33"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Random search CV\n",
        "n_estimators =  [20, 100, 200, 500, 1000, 2000]\n",
        "max_depth = [2, 5, 7, 12, 15, 20]\n",
        "min_samples_split = [2, 5, 8, 14, 20]\n",
        "min_samples_leaf = [1, 2, 5, 10]\n",
        "max_leaf_nodes = [50, 200, 300, 500, 600, 750]\n",
        "\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "              'max_depth': max_depth,\n",
        "              'min_samples_split': min_samples_split,\n",
        "              'min_samples_leaf': min_samples_leaf,\n",
        "             'max_leaf_nodes': max_leaf_nodes, \n",
        "              }\n",
        "RF = RandomForestClassifier()\n",
        "random_search = RandomizedSearchCV(RF, random_grid, n_iter=100, cv = 10, random_state=42, n_jobs = -1)\n",
        "\n",
        "random_search.fit(X_train, y_train)\n",
        "\n",
        "random_search.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jGWFFFSh8-Iy",
        "outputId": "a68c423c-a37b-4d7d-bdc7-b9ebbf4ee0aa"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(max_depth=15, max_leaf_nodes=300, min_samples_leaf=5,\n",
              "                       min_samples_split=8, n_estimators=2000)"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Training again with the best parameters\n",
        "model_RF = RandomForestClassifier(max_depth=15, max_leaf_nodes=300, min_samples_leaf=5, min_samples_split=8, n_estimators=2000)"
      ],
      "metadata": {
        "id": "IMmIdMOGBQqs"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_RF.fit(X_train, y_train)\n",
        "\n",
        "predict = model_RF.predict(X_test)\n",
        "\n",
        "print(classification_report(y_test, predict))\n",
        "print('Accuracy score of the test data : ',accuracy_score(predict, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkB1M6_UB2Uh",
        "outputId": "b9ab83e3-7b1e-4e50-964b-46d48eb1bd5f"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.39      0.55        54\n",
            "           1       0.75      0.98      0.85       100\n",
            "\n",
            "    accuracy                           0.77       154\n",
            "   macro avg       0.83      0.68      0.70       154\n",
            "weighted avg       0.81      0.77      0.74       154\n",
            "\n",
            "Accuracy score of the test data :  0.7727272727272727\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confusion matrix\n",
        "pd.crosstab(y_test,\n",
        "           predict,\n",
        "           rownames=['Actual Labels'],\n",
        "           colnames=['Predicted Labels'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "1dBe2TJQCDPB",
        "outputId": "1c592115-810e-472d-cb8e-0a08bb216412"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Predicted Labels   0   1\n",
              "Actual Labels           \n",
              "0                 21  33\n",
              "1                  2  98"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa24324a-0830-4d46-8163-642e8194470d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Predicted Labels</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Actual Labels</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa24324a-0830-4d46-8163-642e8194470d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aa24324a-0830-4d46-8163-642e8194470d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aa24324a-0830-4d46-8163-642e8194470d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loan_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "0zU221PhCiZ2",
        "outputId": "6946dbc3-3b1b-4c57-8c6f-d30972ec16c5"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Gender  Married  Dependents  Education  Self_Employed  Income  Loan_Amount  \\\n",
              "0       1        0           0          0              0    5849   146.412162   \n",
              "1       1        1           1          0              0    4583   128.000000   \n",
              "2       1        1           0          0              1    3000    66.000000   \n",
              "3       1        1           0          1              0    2583   120.000000   \n",
              "4       1        0           0          0              0    6000   141.000000   \n",
              "\n",
              "   Loan_Amount_Term  Credit_History  Property_Area  Loan_Status  Total_Income  \n",
              "0             360.0             1.0              2            1        5849.0  \n",
              "1             360.0             1.0              0            0        6091.0  \n",
              "2             360.0             1.0              2            1        3000.0  \n",
              "3             360.0             1.0              2            1        4941.0  \n",
              "4             360.0             1.0              2            1        6000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-421bf5ef-8a50-42d1-95c3-f43e97d95ab8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>Income</th>\n",
              "      <th>Loan_Amount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "      <th>Total_Income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5849</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5849.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4583</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6091.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2583</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4941.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6000</td>\n",
              "      <td>141.000000</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-421bf5ef-8a50-42d1-95c3-f43e97d95ab8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-421bf5ef-8a50-42d1-95c3-f43e97d95ab8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-421bf5ef-8a50-42d1-95c3-f43e97d95ab8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gender, Married, Dependents, Education, Self_Employed, Income,\tLoan_Amount, Loan_Amount_Term, Credit_History, Property_Area, Total_Income\n",
        "\n",
        "# get importance\n",
        "importance = model_RF.feature_importances_\n",
        "# summarize feature importance\n",
        "for i,v in enumerate(importance):\n",
        "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
        "# plot feature importance\n",
        "pyplot.bar([x for x in range(len(importance))], importance)\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "o9mHuqD7-REi",
        "outputId": "0155a884-9f5f-4c83-efba-93edcd5dedb4"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature: 0, Score: 0.00981\n",
            "Feature: 1, Score: 0.02259\n",
            "Feature: 2, Score: 0.02782\n",
            "Feature: 3, Score: 0.01285\n",
            "Feature: 4, Score: 0.00561\n",
            "Feature: 5, Score: 0.11336\n",
            "Feature: 6, Score: 0.11064\n",
            "Feature: 7, Score: 0.02248\n",
            "Feature: 8, Score: 0.47855\n",
            "Feature: 9, Score: 0.04545\n",
            "Feature: 10, Score: 0.15084\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gender, Married, Dependents, Education, Self_Employed, Income,\tLoan_Amount, Loan_Amount_Term, Credit_History, Property_Area, Total_Income\n",
        "\n",
        "input_data = (0, 0, 3, 0, 0, 8000, 200.655, 360.0, 1.0, 2, 100000)\n",
        "\n",
        "# changing the input_data to numpy array\n",
        "input_data_as_numpy_array = np.asarray(input_data)\n",
        "\n",
        "# reshape the array as we are predicting for one instance\n",
        "input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n",
        "\n",
        "\n",
        "prediction = model_RF.predict(input_data_reshaped)\n",
        "print(prediction)\n",
        "\n",
        "if (prediction[0] == 0):\n",
        "  print('Do not approve the loan')\n",
        "else:\n",
        "  print('Approve the loan')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ILXdkY_69bNh",
        "outputId": "9d1fa7e3-b3c6-4864-f0c5-07c396247fd5"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\n",
            "Approve the loan\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  \"X does not have valid feature names, but\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6qeYSavoE3ta"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}